syntax = "proto3";

package example;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/zanven42/proto-database-go/dbproto/database.proto";

option (gogoproto.gostring_all) = true;

// test description
message dbUser {
	option (gogoproto.description) = true;
	
	option (dbproto.sqlxdb) = true;
	option (dbproto.dbname) = "db";
	option (dbproto.tablename) = "table";
	bool staff = 1 [(dbproto.colname) = "_staff"]; 
	apiUser apiuser = 2;
}

message apiUser {
	string ID = 1 [(dbproto.colname) = "_Id", (dbproto.autokey) = true];
	string Name = 2 [(dbproto.colname) = "_name"];
	string Email = 3 [(dbproto.colname) = "_email"];
	message Query {
		option (dbproto.query) = "apiUser";
		searchFilter Filter = 1 [(dbproto.queryfilter) = true];
		
		// redefining db fields to allow custom naming for filtering 
		// but requires to re define the column names
		oneof fields {
			string ID = 2 [(dbproto.colname) = "_Id"];
			string Name = 3 [(dbproto.colname) = "_name"];
			string Email = 4 [(dbproto.colname) = "_email"]; 
		}
		
	}
}

message searchFilter {
	oneof filter {
		bool equal = 1 [(dbproto.filterequal) = true]; 
		bool wildcardBoth = 2 [(dbproto.filterwildcardboth) = true];
		bool wildcardFront = 3 [(dbproto.filterwildcardfront) = true];
		bool wildcardBack = 4 [(dbproto.filterwildcardback) = true];
		bool greaterThan = 5 [(dbproto.filtergreaterthan) = true];
		bool lessThan = 6 [(dbproto.filterlessthan) = true];
		bool all = 7 [(dbproto.filterall) = true];
	}
}

message apiUserGetRequest {
	repeated apiUser.Query Query = 1;
}

message apiUserGetResponse {
	repeated apiUser users = 1;
}

service API { 
	rpc GetUser(apiUserGetRequest) returns (apiUserGetResponse);
}